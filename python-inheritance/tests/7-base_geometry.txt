The ``BaseGeometry`` module
======================

Using ``integer_validator``
-------------------


First, import ``BaseGeometry`` from the ``7-base_geometry.py`` file:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Tests:

>>> bg.integer_validator("age", 1)

>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", [1])
Traceback (most recent call last):
...
TypeError: age must be an integer

Test: value must be an integer
>>> bg.integer_validator("Sam", "Simmons")
Traceback (most recent call last):
...
TypeError: Sam must be an integer

Test: value must be a positive number
>>> bg.integer_validator("age", -5)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

Test: value must be a positive number
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

Test: value must be a positive number
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
...
TypeError: age must be an integer
